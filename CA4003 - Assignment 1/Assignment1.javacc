/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
	IGNORE_CASE = true;
	JAVA_UNICODE_ESCAPE = true;
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(CCALTokeniser)

public class CCALTokeniser 
{
	public static void main(String args[]) 
	{
		CCALTokeniser tokeniser;
		if (args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new CCALTokeniser(System.in);
		} 
		else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new CCALTokeniser(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("SLP Tokeniser: Usage is one of:");
			System.out.println(" java CCALTokeniser < inputfile");
			System.out.println("OR");
			System.out.println(" java CCALTokeniser inputfile");
			return;
		}


		try {
            tokeniser.program();
            System.out.println("Parsing completed successful");
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("An error occurred while parsing the file");
        }


	}
}
PARSER_END(CCALTokeniser)
	

/*********************************
***** SECTION 3 - TOKEN DEF  *****
*********************************/

TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : 
{
	<"//" (~["\n"])* "\n">
}

SKIP : {
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++;}
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
	}
	|<~[]>
}


TOKEN : /* reserved words */
{
	 < VARIABLE : "var">
	|< CONSTANT : "const">
	|< RETURN 	: "return">
	|< INTEGER  : "integer">
	|< BOOLEAN  : "boolean">
	|< VOID 	: "void"> 
	|< MAIN 	: "main">
	|< IF 		: "if">
	|< ELSE  	: "else">
	|< TRUE 	: "true">
	|< FALSE 	: "false">
	|< WHILE  	: "while">
	|< SKIPTOKEN: "skip">
}


TOKEN : /*tokens in the language*/
{
	 < COMMA 	 : ",">
	|< SEMICOLON : ";">
	|< COLON 	 : ":">
	|< ASSIGNMENT: "=">
	|< LBRACE	 : "{">
	|< RBRACE 	 : "}">
	|< LBRACKET  : "(">
	|< RBRACKET  : ")">
	|< PLUS 	 : "+">
	|< MINUS     : "-">	
	|< TILDE     : "~">
	|< OR 		 : "||">
	|< AND 		 : "&&">
	|< EQUALS    : "==">
	|< NOTEQUALS : "!=">
	|< LESSTHAN  		 : "<">
	|< LESSTHANEQ 		 : "<=">
	|< GREATTHAN        : ">">
	|< GREATTHANEQ        : ">=">
	|< UNDERSCORE: "_" >
}

TOKEN : /* VALUES */
{
     <NUM : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
	|<#DIGIT: ["0"-"9"] >
	|<ID : <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
	|<#LETTER: ["A"-"Z", "a"-"z"] >
}

TOKEN: /* Anything not recognised so far */
{
	< OTHER : ~[] >
}


/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/


void program() : {}
{
	decl_list() function_list() main()
}

void decl_list() : {}
{
	(decl() <SEMICOLON> decl_list() )?
}

void decl() : {}
{
	var_decl()
  | const_decl()
}

void var_decl() : {}
{
	<VARIABLE> <ID> <COLON> type()
}

void const_decl() : {}
{
	<CONSTANT> <ID> <COLON> type() <ASSIGNMENT> expression()
}

void function_list() : {}
{
	(function() function_list())?
}

void function() : {}
{
	type() <ID> <LBRACKET> parameter_list() <RBRACKET> 
	<LBRACE>
	decl_list()
	statement_block()
	<RETURN> <LBRACKET> ( expression() )? <RBRACKET> <SEMICOLON>
	<RBRACE>
}

void type() : {}
{
	<INTEGER>
	| <BOOLEAN>
	| <VOID>
}

void parameter_list() : {}
{
	(nemp_parameter_list())?
}

void nemp_parameter_list() : {}
{
	<ID> <COLON> type() choice_nemp_parameter()
}

void choice_nemp_parameter() : {}
{
	(<COMMA> nemp_parameter_list())?
}

void main() : {}
{
	<MAIN> <LBRACE>	
	decl_list()
	statement_block()
	<RBRACE>
}

void statement_block() : {}
{
	(statement() statement_block())?
}

void statement() : {}
{
	 <ID> choice_statement()
	|<LBRACE> statement_block() <RBRACE>
	|<IF> condition() <LBRACE> statement_block() <RBRACE> <ELSE> <LBRACE> statement_block() <RBRACE>
	|<WHILE> condition() <LBRACE> statement_block() <RBRACE>
	|<SKIPTOKEN> <SEMICOLON>
}

void choice_statement() : {}
{
	 <ASSIGNMENT> expression() <SEMICOLON>
	|<LBRACKET> arg_list() <RBRACKET> <SEMICOLON>
}

void expression() : {}
{
	fix_expression() expression_arith()
}

void fix_expression() : {}
{
	 (<MINUS>)? <ID>  (LOOKAHEAD(1) <LBRACKET> arg_list() <RBRACKET>)?
	|<NUM>
	|<TRUE>
	|<FALSE>
	|<LBRACKET> expression() <RBRACKET>
	
}

void expression_arith() : {}
{
	binary_arith_op() expression()
	|{}
}

void binary_arith_op() : {} 
{
	 <PLUS>
	|<MINUS>
}

void fragment() : {}
{
	expression()	
}

void condition() : {}
{
	choice_condition() condition_fix()
}

void choice_condition() : {}
{
	 <AND> condition()
	|<OR> condition()
	|{}
}

void condition_fix() : {}
{
     <TILDE> condition()
	|LOOKAHEAD(1) <LBRACKET>  condition() <RBRACKET>
	|expression() comp_op() expression()
}

void  comp_op() : {} 
{
	 <EQUALS>
	|<NOTEQUALS>
	|<LESSTHAN>
	|<LESSTHANEQ>
	|<GREATTHAN>
	|<GREATTHANEQ>
}

void arg_list() : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list() : {}
{
	<ID> (<COMMA> nemp_arg_list())?
}