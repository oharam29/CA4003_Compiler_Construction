/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Assignment2.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
 	IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
                 
                   
                             
                     
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(CCALTokeniser)

import java.io.*;
import java.util.*;

public class CCALTokeniser/*@bgen(jjtree)*/implements CCALTokeniserTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTCCALTokeniserState jjtree = new JJTCCALTokeniserState();

/*@egen*/

		public static String scope = "Global";
		public static SymbolTable symbolTable = new SymbolTable();
	

	public static void main(String args[]) 
	{
		CCALTokeniser tokeniser;
		if (args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new CCALTokeniser(System.in);
		} 
		else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new CCALTokeniser(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("CCAL Tokeniser: Usage is one of:");
			System.out.println(" java CCALTokeniser < inputfile");
			System.out.println("OR");
			System.out.println(" java CCALTokeniser inputfile");
			return;
		}

		try {

			SimpleNode root = tokeniser.program();
        	System.out.println("Abstract Syntax Tree:");
        	root.dump("");

        	System.out.println("\nSymbolTable:");
        	symbolTable.PrintTable();

        	System.out.println("\nSemantic Checks");
        	SemCheck semc = new SemCheck();
        	root.jjtAccept(semc, symbolTable);


        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Parse failure");
        }


	}
}
PARSER_END(CCALTokeniser)
	

/*********************************
***** SECTION 3 - TOKEN DEF  *****
*********************************/

TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : 
{
	<"//" (~["\n"])* "\n">
}

SKIP : {
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++;}
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
	}
	|<~[]>
}


TOKEN : /* reserved words */
{
	 < VARIABLE : "var">
	|< CONSTANT : "const">
	|< RETURN 	: "return">
	|< INTEGER  : "integer">
	|< BOOLEAN  : "boolean">
	|< VOID 	: "void"> 
	|< MAIN 	: "main">
	|< IF 		: "if">
	|< ELSE  	: "else">
	|< TRUE 	: "true">
	|< FALSE 	: "false">
	|< WHILE  	: "while">
	|< SKIPTOKEN: "skip">
}


TOKEN : /*tokens in the language*/
{
	 < COMMA 	 : ",">
	|< SEMICOLON : ";">
	|< COLON 	 : ":">
	|< ASSIGNMENT: "=">
	|< LBRACE	 : "{">
	|< RBRACE 	 : "}">
	|< LBRACKET  : "(">
	|< RBRACKET  : ")">
	|< PLUS 	 : "+">
	|< MINUS     : "-">	
	|< TILDE     : "~">
	|< OR 		 : "||">
	|< AND 		 : "&&">
	|< EQUALS    : "==">
	|< NOTEQUALS : "!=">
	|< LESSTHAN  		 : "<">
	|< LESSTHANEQ 		 : "<=">
	|< GREATTHAN        : ">">
	|< GREATTHANEQ        : ">=">
	|< UNDERSCORE: "_" >
}

TOKEN : /* VALUES */
{
     <NUM : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
	|<#DIGIT: ["0"-"9"] >
	|<ID : <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
	|<#LETTER: ["A"-"Z", "a"-"z"] >
}

TOKEN: /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/


SimpleNode program()               : {/*@bgen(jjtree) ProgramStart */
  ProgramStart jjtn000 = new ProgramStart(JJTPROGRAMSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProgramStart */
        try {
/*@egen*/
	decl_list() function_list() main() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void  decl_list() : {}
{
	(decl() <SEMICOLON> decl_list() )?
}

void decl() : {}
{
		var_decl()
	  | const_decl()
}

void var_decl()      : {/*@bgen(jjtree) Var */
                         Var jjtn000 = new Var(JJTVAR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String id; String type; }
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	t = <VARIABLE> id = id() <COLON> type = type()/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ { jjtn000.value = t.image; 
	symbolTable.addToTable(id, "var", type, scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void const_decl()        : {/*@bgen(jjtree) Const */
                            Const jjtn000 = new Const(JJTCONST);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Const */
        try {
/*@egen*/
	t = <CONSTANT> id = id() <COLON> type = type() <ASSIGNMENT> expression()/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ { jjtn000.value = t.image; symbolTable.addToTable(id,"const",type,scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Identifier()     : {/*@bgen(jjtree) ID */
                            ID jjtn000 = new ID(JJTID);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) ID */
        try {
/*@egen*/
	(t = <ID>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number()          : {/*@bgen(jjtree) Number */
                          Number jjtn000 = new Number(JJTNUMBER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_list() : {}
{
	(function() function_list())?
}

void function()           : {/*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type = type() id = id() {symbolTable.addToTable(id,"Function",type,scope); scope = id;} <LBRACKET> parameter_list() <RBRACKET> 
	<LBRACE>
	decl_list()
	statement_block()
	<RETURN> <LBRACKET> returnFunc() <RBRACKET> <SEMICOLON>
	<RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void returnFunc()         : {/*@bgen(jjtree) Return */
  Return jjtn000 = new Return(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
        try {
/*@egen*/
	( expression() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

String type()       : {/*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| t = <BOOLEAN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| t = <VOID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameter_list()             : {/*@bgen(jjtree) Param_list */
  Param_list jjtn000 = new Param_list(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Param_list */
        try {
/*@egen*/
	(nemp_parameter_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nemp_parameter_list()             : {/*@bgen(jjtree) Parameters */
                                          Parameters jjtn000 = new Parameters(JJTPARAMETERS);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	id = id() <COLON> type = type() (<COMMA> nemp_parameter_list())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{symbolTable.addToTable(id,"param",type,scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void main()       : {/*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	{scope = "main";}
	<MAIN> 
	<LBRACE>	
	decl_list()
	statement_block()
	<RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_block() : {}
{
	(statement() statement_block())?
}

void statement()            : {/*@bgen(jjtree) Statement */
                               Statement jjtn000 = new Statement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
         try {
/*@egen*/
	 id() (t = <ASSIGNMENT> expression() <SEMICOLON>/*@bgen(jjtree) #Assign( 2) */
                                                         {
                                                           Assign jjtn001 = new Assign(JJTASSIGN);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                         }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
                                                         }
/*@egen*/              | (function_call())? <SEMICOLON> )
	|<LBRACE> statement_block() <RBRACE>
	|t = <IF> condition() <LBRACE> statement_block() <RBRACE> <ELSE> <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                             }
/*@egen*/ {jjtn000.value = t.image;}
	|t = <WHILE> condition() <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.value = t.image;}
	|<SKIPTOKEN> <SEMICOLON>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void function_call() : {Token t;}
{
	<LBRACKET> arg_list()/*@bgen(jjtree) #FunctionCall( 1) */
                              {
                                FunctionCall jjtn001 = new FunctionCall(JJTFUNCTIONCALL);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
                              }
/*@egen*/                 
}

void choice_statement() : {Token t;}
{
	 t = <ASSIGNMENT> expression() <SEMICOLON>/*@bgen(jjtree) Assign */
                                                   {
                                                     Assign jjtn001 = new Assign(JJTASSIGN);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn001, true);
                                                     jjtc001 = false;
                                                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
                                                   }
/*@egen*/         
	|t = <LBRACKET> arg_list() <RBRACKET>/*@bgen(jjtree) ArgList_Assign */
                                              {
                                                ArgList_Assign jjtn002 = new ArgList_Assign(JJTARGLIST_ASSIGN);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                }
                                              }
/*@egen*/                 
	| {}
	}


void expression() : {}
{
	choice_expression() expression_arith()
}

void choice_expression() : {}
{
	
	(<MINUS>)? id() (LOOKAHEAD(1)  function_call())?
	|number()
	|<TRUE> 
	|<FALSE> 
	|<LBRACKET> expression() <RBRACKET>	
}

void expression_arith() : {}
{
	binary_arith_op() expression()
	|{}
}

void fragment() : {}
{
	expression()	
}

void binary_arith_op() : { Token t;} 
{
	 t = <PLUS>/*@bgen(jjtree) Plus */
                    {
                      Plus jjtn001 = new Plus(JJTPLUS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/       
	|t = <MINUS>/*@bgen(jjtree) Minus */
                     {
                       Minus jjtn002 = new Minus(JJTMINUS);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/        
}

void condition() : {}
{
	choice_condition() condition_simple()
}

void choice_condition() : {Token t;}
{
	t = <AND> condition()/*@bgen(jjtree) And */
                              {
                                And jjtn001 = new And(JJTAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/      
	|t = <OR> condition()/*@bgen(jjtree) Or */
                              {
                                Or jjtn002 = new Or(JJTOR);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtc002 = false;
                              }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
                              }
/*@egen*/     
	|{}
}

void condition_simple() : {}
{
     <TILDE> condition()
	|LOOKAHEAD(1) <LBRACKET>  condition() <RBRACKET>
	|expression() comp_op() expression()
}

void comp_op()       : {/*@bgen(jjtree) Comp */
                         Comp jjtn000 = new Comp(JJTCOMP);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Comp */
          try {
/*@egen*/
	  t = <EQUALS>/*@bgen(jjtree) EQ */
                       {
                         EQ jjtn001 = new EQ(JJTEQ);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/    
	| t = <NOTEQUALS>/*@bgen(jjtree) NotEQ */
                          {
                            NotEQ jjtn002 = new NotEQ(JJTNOTEQ);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/       
	| t = <LESSTHAN>/*@bgen(jjtree) LESST */
                         {
                           LESST jjtn003 = new LESST(JJTLESST);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                         }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
                         }
/*@egen*/       
	| t = <LESSTHANEQ>/*@bgen(jjtree) LESSTEQ */
                           {
                             LESSTEQ jjtn004 = new LESSTEQ(JJTLESSTEQ);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn004, true);
                             jjtc004 = false;
                           }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                             }
                           }
/*@egen*/         
	| t = <GREATTHAN>/*@bgen(jjtree) GREATT */
                           {
                             GREATT jjtn005 = new GREATT(JJTGREATT);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn005, true);
                             jjtc005 = false;
                           }
/*@egen*/  {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005, true);
                             }
                           }
/*@egen*/        
	| t = <GREATTHANEQ>/*@bgen(jjtree) GREATTEQ */
                            {
                              GREATTEQ jjtn006 = new GREATTEQ(JJTGREATTEQ);
                              boolean jjtc006 = true;
                              jjtree.openNodeScope(jjtn006);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn006, true);
                              jjtc006 = false;
                            }
/*@egen*/ {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc006) {
                                jjtree.closeNodeScope(jjtn006, true);
                              }
                            }
/*@egen*/          /*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void arg_list() : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list() : {}
{
	<ID> (<COMMA> nemp_arg_list())?
}

String id()     : {/*@bgen(jjtree) ID */
                   ID jjtn000 = new ID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void number()        : {/*@bgen(jjtree) Number */
                        Number jjtn000 = new Number(JJTNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t = <NUM>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bool()      : {/*@bgen(jjtree) Bool */
                    Bool jjtn000 = new Bool(JJTBOOL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
  try {
/*@egen*/
  t = <TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }
| t = <FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}