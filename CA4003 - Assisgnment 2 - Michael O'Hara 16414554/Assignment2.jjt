/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
 	IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = "";
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(CCALTokeniser)

import java.io.*;
import java.util.*;

public class CCALTokeniser 
{

		public static String scope = "Global";
		public static SymbolTable symbolTable = new SymbolTable();
	

	public static void main(String args[]) 
	{
		CCALTokeniser tokeniser;
		if (args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new CCALTokeniser(System.in);
		} 
		else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new CCALTokeniser(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("CCAL Tokeniser: Usage is one of:");
			System.out.println(" java CCALTokeniser < inputfile");
			System.out.println("OR");
			System.out.println(" java CCALTokeniser inputfile");
			return;
		}

		try {

			SimpleNode root = tokeniser.program();
        	System.out.println("Abstract Syntax Tree:");
        	root.dump("");

        	System.out.println("\nSymbolTable:");
        	symbolTable.PrintTable();

        	System.out.println("\nSemantic Checks");
        	SemCheck semc = new SemCheck();
        	root.jjtAccept(semc, symbolTable);


        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Parse failure");
        }


	}
}
PARSER_END(CCALTokeniser)
	

/*********************************
***** SECTION 3 - TOKEN DEF  *****
*********************************/

TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : 
{
	<"//" (~["\n"])* "\n">
}

SKIP : {
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++;}
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
	}
	|<~[]>
}


TOKEN : /* reserved words */
{
	 < VARIABLE : "var">
	|< CONSTANT : "const">
	|< RETURN 	: "return">
	|< INTEGER  : "integer">
	|< BOOLEAN  : "boolean">
	|< VOID 	: "void"> 
	|< MAIN 	: "main">
	|< IF 		: "if">
	|< ELSE  	: "else">
	|< TRUE 	: "true">
	|< FALSE 	: "false">
	|< WHILE  	: "while">
	|< SKIPTOKEN: "skip">
}


TOKEN : /*tokens in the language*/
{
	 < COMMA 	 : ",">
	|< SEMICOLON : ";">
	|< COLON 	 : ":">
	|< ASSIGNMENT: "=">
	|< LBRACE	 : "{">
	|< RBRACE 	 : "}">
	|< LBRACKET  : "(">
	|< RBRACKET  : ")">
	|< PLUS 	 : "+">
	|< MINUS     : "-">	
	|< TILDE     : "~">
	|< OR 		 : "||">
	|< AND 		 : "&&">
	|< EQUALS    : "==">
	|< NOTEQUALS : "!=">
	|< LESSTHAN  		 : "<">
	|< LESSTHANEQ 		 : "<=">
	|< GREATTHAN        : ">">
	|< GREATTHANEQ        : ">=">
	|< UNDERSCORE: "_" >
}

TOKEN : /* VALUES */
{
     <NUM : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
	|<#DIGIT: ["0"-"9"] >
	|<ID : <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
	|<#LETTER: ["A"-"Z", "a"-"z"] >
}

TOKEN: /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/


SimpleNode program() #ProgramStart : {}
{
	decl_list() function_list() main() <EOF> { return jjtThis; }
}

void  decl_list() : {}
{
	(decl() <SEMICOLON> decl_list() )?
}

void decl() : {}
{
		var_decl()
	  | const_decl()
}

void var_decl() #Var : { Token t; String id; String type; }
{
	t = <VARIABLE> id = id() <COLON> type = type() { jjtThis.value = t.image; 
	symbolTable.addToTable(id, "var", type, scope);}
}

void const_decl() #Const : {Token t; String id; String type;}
{
	t = <CONSTANT> id = id() <COLON> type = type() <ASSIGNMENT> expression() { jjtThis.value = t.image; symbolTable.addToTable(id,"const",type,scope);}
}

String Identifier() #ID : { Token t;}
{
	(t = <ID>){jjtThis.value = t.image; return t.image;}
}

void Number() # Number : {Token t;}
{
	t = <NUM> {jjtThis.value = t.image;}
}

void function_list() : {}
{
	(function() function_list())?
}

void function() #Function : {Token t; String id; String type;}
{
	type = type() id = id() {symbolTable.addToTable(id,"Function",type,scope); scope = id;} <LBRACKET> parameter_list() <RBRACKET> 
	<LBRACE>
	decl_list()
	statement_block()
	<RETURN> <LBRACKET> returnFunc() <RBRACKET> <SEMICOLON>
	<RBRACE> 
}

void returnFunc() #Return : {}
{
	( expression() )? 
}

String type() #Type : {Token t;}
{
	t = <INTEGER> {jjtThis.value = t.image; return t.image;}
	| t = <BOOLEAN> {jjtThis.value = t.image; return t.image;}
	| t = <VOID> {jjtThis.value = t.image; return t.image;}
}

void parameter_list() #Param_list : {}
{
	(nemp_parameter_list())?
}

void nemp_parameter_list() #Parameters : {Token t; String type; String id;}
{
	id = id() <COLON> type = type() (<COMMA> nemp_parameter_list())?
	{symbolTable.addToTable(id,"param",type,scope);}
}

void main() #Main : {}
{
	{scope = "main";}
	<MAIN> 
	<LBRACE>	
	decl_list()
	statement_block()
	<RBRACE>
}

void statement_block() : {}
{
	(statement() statement_block())?
}

void statement() #Statement : {Token t;}
{
	 id() (t = <ASSIGNMENT> expression() <SEMICOLON> {jjtThis.value = t.image;} # Assign(2)  | (function_call())? <SEMICOLON> )
	|<LBRACE> statement_block() <RBRACE>
	|t = <IF> condition() <LBRACE> statement_block() <RBRACE> <ELSE> <LBRACE> statement_block() <RBRACE> {jjtThis.value = t.image;}
	|t = <WHILE> condition() <LBRACE> statement_block() <RBRACE> {jjtThis.value = t.image;}
	|<SKIPTOKEN> <SEMICOLON>
}

void function_call() : {Token t;}
{
	<LBRACKET> arg_list() <RBRACKET> #FunctionCall(1)
}

void choice_statement() : {Token t;}
{
	 t = <ASSIGNMENT> expression() <SEMICOLON> {jjtThis.value = t.image;} # Assign
	|t = <LBRACKET> arg_list() <RBRACKET> <SEMICOLON> # ArgList_Assign
	| {}
	}


void expression() : {}
{
	choice_expression() expression_arith()
}

void choice_expression() : {}
{
	
	(<MINUS>)? id() (LOOKAHEAD(1)  function_call())?
	|number()
	|<TRUE> 
	|<FALSE> 
	|<LBRACKET> expression() <RBRACKET>	
}

void expression_arith() : {}
{
	binary_arith_op() expression()
	|{}
}

void fragment() : {}
{
	expression()	
}

void binary_arith_op() : { Token t;} 
{
	 t = <PLUS> {jjtThis.value = t.image; } # Plus
	|t = <MINUS> {jjtThis.value = t.image;} # Minus
}

void condition() : {}
{
	choice_condition() condition_simple()
}

void choice_condition() : {Token t;}
{
	t = <AND> condition() {jjtThis.value = t.image;} # And
	|t = <OR> condition() {jjtThis.value = t.image;} # Or
	|{}
}

void condition_simple() : {}
{
     <TILDE> condition()
	|LOOKAHEAD(1) <LBRACKET>  condition() <RBRACKET>
	|expression() comp_op() expression()
}

void comp_op() #Comp : { Token t;}
{
	  t = <EQUALS> {jjtThis.value = t.image; } #EQ
	| t = <NOTEQUALS> {jjtThis.value = t.image;} #NotEQ
	| t = <LESSTHAN> {jjtThis.value = t.image;} #LESST
	| t = <LESSTHANEQ> {jjtThis.value = t.image;} #LESSTEQ
	| t = <GREATTHAN>  {jjtThis.value = t.image;} #GREATT
	| t = <GREATTHANEQ> {jjtThis.value = t.image;} #GREATTEQ
}

void arg_list() : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list() : {}
{
	<ID> (<COMMA> nemp_arg_list())?
}

String id() #ID : {Token t;}
{
  t = <ID> {jjtThis.value = t.image; return t.image; } 
}

void number() #Number: {Token t;}
{
  t = <NUM> {jjtThis.value = t.image;}
}

void bool() #Bool: {Token t;}
{
  t = <TRUE> { jjtThis.value = t.image; }
| t = <FALSE> { jjtThis.value = t.image; }

}